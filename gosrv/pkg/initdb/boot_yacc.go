// Code generated by goyacc -o boot_yacc.go bootparser.y. DO NOT EDIT.

//line bootparser.y:2
/*-------------------------------------------------------------------------
 *
 * bootparse.y
 *	  yacc grammar for the "bootstrap" mode (BKI file format)
 *
 * Portions Copyright (c) 2006-2009, Greenplum inc
 * Portions Copyright (c) 2012-Present Pivotal Software, Inc.
 * Portions Copyright (c) 1996-2014, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/bootstrap/bootparse.y
 *
 *-------------------------------------------------------------------------
 */
package main

import __yyfmt__ "fmt"

//line bootparser.y:18

import (
	"fmt"
	"log"
	"strconv"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)
const InvalidOid = 0

var num_columns_read int

const BOOTCOL_NULL_AUTO = 1
const BOOTCOL_NULL_FORCE_NULL = 2
const BOOTCOL_NULL_FORCE_NOT_NULL = 3

/*
func unimplemented(sqllex sqlLexer, feature string) int {
    sqllex.(*lexer).Unimplemented(feature)
    return 1
}

func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
    sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
    return 1
}

func setErr(sqllex sqlLexer, err error) int {
    sqllex.(*lexer).setErr(err)
    return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
    sqllex.(*lexer).UnimplementedWithIssue(issue)
    return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
    sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
    return 1
}
*/

func heap_create(relname string, relnamespace uint64,
	reltablespace uint64,
	relid uint64,
	relfilenode,
	accessmtd uint64,
	tupDesc TupleDesc,
	relkind byte,
	relpersistence byte,
	shared_relation bool,
	mapped_relation bool,
	allow_system_table_mods,
	relfrozenxid *TransactionId,
	relminmxid *MultiXactId) {

}

func heap_create_with_catalog() {
}

//line bootparser.y:87
type yySymType struct {
	yys    int
	ival   int32
	pos    int32
	str    string
	oidval uint64
	stmt   StatementUnion
}

const NOTHING = 57346
const CONST_P = 57347
const ID = 57348
const OPEN = 57349
const XCLOSE = 57350
const XCREATE = 57351
const INSERT_TUPLE = 57352
const XDECLARE = 57353
const INDEX = 57354
const ON = 57355
const USING = 57356
const XBUILD = 57357
const INDICES = 57358
const UNIQUE = 57359
const XTOAST = 57360
const OBJ_ID = 57361
const XBOOTSTRAP = 57362
const XSHARED_RELATION = 57363
const XWITHOUT_OIDS = 57364
const XROWTYPE_OID = 57365
const NULLVAL = 57366
const XFORCE = 57367
const XNOT = 57368
const XNULL = 57369
const COMMA = 57370
const EQUALS = 57371
const LPAREN = 57372
const RPAREN = 57373
const low = 57374
const high = 57375

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NOTHING",
	"CONST_P",
	"ID",
	"OPEN",
	"XCLOSE",
	"XCREATE",
	"INSERT_TUPLE",
	"XDECLARE",
	"INDEX",
	"ON",
	"USING",
	"XBUILD",
	"INDICES",
	"UNIQUE",
	"XTOAST",
	"OBJ_ID",
	"XBOOTSTRAP",
	"XSHARED_RELATION",
	"XWITHOUT_OIDS",
	"XROWTYPE_OID",
	"NULLVAL",
	"XFORCE",
	"XNOT",
	"XNULL",
	"COMMA",
	"EQUALS",
	"LPAREN",
	"RPAREN",
	"low",
	"high",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line bootparser.y:439

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 107

var yyAct = [...]int8{
	30, 78, 75, 88, 46, 50, 20, 77, 85, 85,
	82, 92, 84, 19, 21, 22, 80, 72, 67, 38,
	83, 32, 95, 96, 49, 97, 33, 94, 58, 50,
	20, 56, 63, 55, 29, 41, 44, 37, 25, 47,
	24, 28, 70, 26, 27, 65, 47, 60, 49, 53,
	57, 51, 59, 34, 61, 20, 45, 3, 31, 47,
	18, 66, 35, 64, 81, 74, 69, 39, 40, 71,
	42, 73, 76, 79, 11, 10, 52, 9, 8, 7,
	86, 79, 6, 76, 90, 89, 79, 91, 87, 12,
	13, 14, 15, 16, 5, 4, 2, 17, 68, 1,
	62, 23, 93, 54, 43, 36, 48,
}

var yyPact = [...]int16{
	82, -1000, 82, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 49, 49, 49, 21, 26, 25, -1000, -1000,
	-1000, -1000, 49, -1000, -8, 49, 41, 49, -1000, 17,
	-1000, -11, 49, 49, 49, 49, 15, -1000, 24, -1000,
	38, 49, 36, 11, -1000, 0, -1000, -1000, -1000, -1000,
	-1000, 49, 34, 49, 9, -1000, -1000, -1000, 24, 31,
	49, -1000, -12, 49, -1000, 49, 28, -1000, -1000, -13,
	49, 49, 49, -14, -18, -1000, -9, -19, -1000, 49,
	49, -28, 49, 49, -1000, 49, -1000, -20, -1000, -1000,
	2, -1000, -1000, -1000, -4, -2, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 7, 1, 106, 0, 105, 104, 103, 102, 34,
	101, 100, 100, 99, 96, 57, 95, 94, 82, 79,
	78, 77, 75, 74, 69, 65, 64, 58, 56, 2,
	4,
}

var yyR1 = [...]int8{
	0, 13, 14, 14, 15, 15, 15, 15, 15, 15,
	15, 15, 16, 17, 17, 24, 26, 18, 27, 19,
	20, 21, 22, 23, 1, 1, 2, 5, 5, 6,
	6, 7, 7, 11, 11, 25, 25, 29, 8, 8,
	8, 9, 10, 10, 28, 28, 28, 30, 30, 30,
	3, 4, 12,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 0, 0, 12, 0, 6,
	11, 12, 6, 2, 3, 1, 2, 1, 0, 1,
	0, 1, 0, 2, 0, 1, 3, 4, 3, 2,
	0, 1, 3, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -13, -14, -15, -16, -17, -18, -19, -20, -21,
	-22, -23, 7, 8, 9, 10, 11, 15, -15, -4,
	6, -4, -4, -10, 19, 12, 17, 18, 16, -9,
	-4, -27, 29, -4, 12, -9, -5, 20, 30, -9,
	-9, -4, -9, -6, 21, -28, -30, -4, -3, 24,
	5, 13, -9, 13, -7, 22, 31, -30, 28, -4,
	13, -4, -11, 23, -30, 14, -4, 30, -9, -4,
	14, -24, 30, -4, -25, -29, -4, -1, -2, -4,
	30, -26, 28, 29, 31, 28, -4, -1, 31, -29,
	-4, -2, 31, -8, 25, 26, 27, 27,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 0, 14, 0, 43, 0, 0, 3, 12,
	51, 13, 0, 18, 0, 0, 0, 0, 23, 28,
	41, 0, 0, 0, 0, 0, 30, 27, 0, 42,
	0, 0, 0, 32, 29, 0, 44, 47, 48, 49,
	50, 0, 0, 0, 34, 31, 19, 45, 0, 0,
	0, 22, 0, 0, 46, 0, 0, 15, 33, 0,
	0, 0, 0, 0, 16, 35, 0, 0, 25, 0,
	0, 0, 0, 0, 20, 0, 26, 0, 17, 36,
	40, 24, 21, 37, 0, 0, 39, 38,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line bootparser.y:154
		{
			log.Println("open", yyDollar[2].str)
			boot.OpenRelation(yyDollar[2].str)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line bootparser.y:162
		{
			//do_start();
			//closerel($2);
			//do_end();
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:168
		{
			//do_start();
			//closerel(NULL);
			//do_end();
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line bootparser.y:177
		{
			log.Println("start create")
			//do_start();
			//numattr = 0;
			//elog(DEBUG4, "creating%s%s relation %s %u",
			//	 $4 ? " bootstrap" : "",
			//	 $5 ? " shared" : "",
			//	 $2,
			//	 $3);
		}
	case 16:
		yyDollar = yyS[yypt-10 : yypt+1]
//line bootparser.y:188
		{
			log.Println("boot create")
			//do_end();
		}
	case 17:
		yyDollar = yyS[yypt-12 : yypt+1]
//line bootparser.y:193
		{
			log.Println("end create")
			//var shared_relation bool
			//var	mapped_relation bool

			//do_start();

			//boot.CreateTupleDesc()

			//shared_relation = ($5 != 0)

			/*
			 * The catalogs that use the relation mapper are the
			 * bootstrap catalogs plus the shared catalogs.  If this
			 * ever gets more complicated, we should invent a BKI
			 * keyword to mark the mapped catalogs, but for now a
			 * quick hack seems the most appropriate thing.  Note in
			 * particular that all "nailed" heap rels (see formrdesc
			 * in relcache.c) must be mapped.
			 */

			//mapped_relation = ($4 != 0) || shared_relation;

			if yyDollar[4].ival != 0 {
				//		if (boot_reldesc)
				//		{
				//			elog(DEBUG4, "create bootstrap: warning, open relation exists, closing first");
				//			closerel(NULL);
				//		}
				//
				//		boot_reldesc = heap_create($2,
				//								   PG_CATALOG_NAMESPACE,
				//								   shared_relation ? GLOBALTABLESPACE_OID : 0,
				//								   $3,
				//								   InvalidOid,
				//								   tupdesc,
				//								   /* relam */ InvalidOid,
				//								   RELKIND_RELATION,
				//								   RELPERSISTENCE_PERMANENT,
				//								   RELSTORAGE_HEAP,
				//								   shared_relation,
				//								   mapped_relation,
				//								   true);
				//		elog(DEBUG4, "bootstrap relation created");
				//		}
				//		else
				//		{
				//			Oid id;
				//
				///						id = heap_create_with_catalog($2,
				//													  PG_CATALOG_NAMESPACE,
				//													  shared_relation ? GLOBALTABLESPACE_OID : 0,
				//													  $3,
				//													  $7,
				//													  InvalidOid,
				//													  BOOTSTRAP_SUPERUSERID,
				//													  tupdesc,
				//													  NIL,
				//													  /* relam */ InvalidOid,
				//													  RELKIND_RELATION,
				//													  RELPERSISTENCE_PERMANENT,
				//													  RELSTORAGE_HEAP,
				//													  shared_relation,
				//													  mapped_relation,
				//													  true,
				//													  0,
				//													  ONCOMMIT_NOOP,
				//													  NULL,			/*CDB*/
				//													  (Datum) 0,
				//													  false,
				//													  true,
				//													  false,
				//													  /* valid_opts */ false,
				//													  /* is_part_child */ false,
				//													  /* is_part_parent */ false);
				//						elog(DEBUG4, "relation created with oid %u", id);
				//					}
				//					do_end();
				//                  */
			}
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line bootparser.y:278
		{
			//fmt.Println($2)
			//do_start();
			//if ($2)
			//	elog(DEBUG4, "inserting row with oid %u", $2);
			//else
			//	elog(DEBUG4, "inserting row");
			ResetInsert()
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
//line bootparser.y:288
		{
			/*
				if (num_columns_read != numattr)
				//	elog(ERROR, "incorrect number of columns in row (expected %d, got %d)",
						 numattr, num_columns_read);
				if (boot_reldesc == NULL)
					elog(FATAL, "relation not open");

				do_end();
			*/
			InsertOneTuple()
		}
	case 20:
		yyDollar = yyS[yypt-11 : yypt+1]
//line bootparser.y:304
		{

		}
	case 21:
		yyDollar = yyS[yypt-12 : yypt+1]
//line bootparser.y:311
		{

		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line bootparser.y:318
		{
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line bootparser.y:324
		{
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line bootparser.y:330
		{ /* $$ = lappend($1, $3); */
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:331
		{ /* $$ = list_make1($1); */
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line bootparser.y:336
		{
			/*
				IndexElem *n = makeNode(IndexElem);
				n->name = $1;
				n->expr = NULL;
				n->indexcolname = NULL;
				n->collation = NIL;
				n->opclass = list_make1(makeString($2));
				n->ordering = SORTBY_DEFAULT;
				n->nulls_ordering = SORTBY_NULLS_DEFAULT;
				$$ = n;
			*/
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:352
		{
			yyVAL.ival = 1
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line bootparser.y:353
		{
			yyVAL.ival = 0
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:357
		{
			yyVAL.ival = 1
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line bootparser.y:358
		{
			yyVAL.ival = 0
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:362
		{
			yyVAL.ival = 1
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line bootparser.y:363
		{
			yyVAL.ival = 0
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line bootparser.y:367
		{
			yyVAL.oidval = yyDollar[2].oidval
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line bootparser.y:368
		{
			yyVAL.oidval = InvalidOid
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line bootparser.y:378
		{
			boot.DefineAttr(yyDollar[1].str, yyDollar[3].str, yyDollar[4].ival)
			fmt.Println(yyDollar[1].str, " = ", yyDollar[3].str)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line bootparser.y:385
		{
			yyVAL.ival = BOOTCOL_NULL_FORCE_NOT_NULL
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line bootparser.y:386
		{
			yyVAL.ival = BOOTCOL_NULL_FORCE_NULL
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line bootparser.y:387
		{
			yyVAL.ival = BOOTCOL_NULL_AUTO
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:392
		{
			intVar, _ := strconv.ParseUint(yyDollar[1].str, 0, 64)
			yyVAL.oidval = intVar
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line bootparser.y:399
		{
			yyVAL.oidval = yyDollar[3].oidval
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line bootparser.y:400
		{
			yyVAL.oidval = InvalidOid
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:411
		{
			boot.AppendValueToRow(yyDollar[1].str)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:415
		{
			boot.AppendValueToRow(yyDollar[1].str)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:419
		{
			boot.AppendNullToRow()
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:425
		{

		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:431
		{

		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line bootparser.y:437
		{
			log.Println("get nothing", yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
